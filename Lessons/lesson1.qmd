---
title: "1: Getting started"
---

## 计算机程序设计语言：与电脑沟通的艺术

对于很多初学者而言，“编程”、“代码”这些词汇可能听起来像是另一个世界的语言，充满了神秘感和距离感。大家可能会觉得，我们又不当程序员，为什么要了解这些？

其实，在今天这个高度数字化的时代，了解一些计算机科学的基本逻辑，能帮助我们更好地理解我们所生活的世界，提升解决问题的能力，甚至在未来的职业生涯中带来意想不到的优势。

这篇介绍的目的，不是让大家成为专业的程序员，而是揭开编程的神秘面纱，让大家明白它到底是什么，以及它如何驱动我们每天使用的软件和应用。

### 什么是程序设计语言？

想象一下，你想让一位只会说英语的朋友帮你去图书馆借一本书。你必须用英语，按照清晰的逻辑（比如：先走到图书馆 -\> 然后找到特定区域 -\> 根据书名找到书架 -\> 最后办理借阅手续），一步步地告诉他该怎么做。

**程序设计语言（Programming Language）**，就是我们与计算机沟通的“语言”。

计算机本质上只懂由 0 和 1 组成的“机器语言”，这对人类来说太复杂了。于是，科学家们发明了各种程序设计语言，让我们能用更接近人类自然语言的方式，给计算机下达一系列清晰、无歧义的指令，告诉它“做什么”以及“怎么做”。

当我们写好的指令（我们称之为**源代码**）被计算机执行后，就能实现各种各样的功能——比如你正在使用的微信、你浏览的淘宝、你观看的视频，背后都是由千百万行代码构成的复杂程序。

### C 和 C++：严谨高效的工业标准

在众多编程语言中，C 和 C++ 是两座无法绕过的高峰。

#### C 语言：现代语言的基石

C 语言诞生于上世纪 70 年代，是一位真正的“元老”。它的设计哲学是**简洁、高效、贴近底层硬件**。你可以把它想象成手动挡的汽车，虽然操作起来比自动挡复杂，需要你精确控制离合和油门，但它能让你最大程度地掌控汽车的性能，开得飞快。

  * **特点**：
      * **执行效率极高**：代码被转换成机器指令后，几乎没有多余的动作，运行速度非常快。
      * **控制力强**：可以直接操作内存（计算机存储数据的地方），像一个精密的外科医生，能精确控制计算机的每一个细节。
      * **过程导向**：编程的思维方式是“一步一步做什么”，像一个流程图。

#### C++ 语言：C 语言的超集与进化

随着软件越来越复杂，人们发现单纯用 C 语言来构建大型项目（比如一个操作系统或一个大型游戏）太困难了。于是，在 C 语言的基础上，C++ 诞生了。

C++ 完全兼容 C 语言，并在此之上增加了一个强大的新特性——**面向对象编程（Object-Oriented Programming, OOP）**。

这是什么意思呢？想象一下，你要盖一栋房子。

  * **C 语言的方式（过程导向）**：你会思考步骤，“先打地基 -\> 再砌墙 -\> 然后封顶 -\> 最后装修……”
  * **C++ 的方式（面向对象）**：你会先思考这栋房子由哪些“对象”组成，比如“柱子”、“墙壁”、“窗户”、“门”。你会先设计好每个“对象”应该长什么样、有什么功能（比如窗户可以打开和关闭），然后再把这些预制好的对象“组装”成一栋房子。

这种“面向对象”的思想，让 C++ 更适合开发规模宏大、逻辑复杂的软件系统。

  * **特点**：
      * 继承了 C 语言的高效和底层控制力。
      * 通过“面向对象”思想，让代码的组织、复用和维护变得更加容易。
      * 功能极其强大，但也因此变得非常复杂，学习曲线陡峭。

#### 工作原理：从代码到程序的“翻译”之旅

我们用 C/C++ 写下的代码（例如一个 `.cpp` 文件），计算机是看不懂的。它需要经历一个“翻译”和“组装”的过程，才能变成一个可以执行的程序（比如 Windows 上的 `.exe` 文件）。这个过程主要分为两步：

1.  **编译（Compilation）**

      * **编译器（Compiler）** 就像一个语言翻译官。它会检查你的 C++ 代码有没有语法错误（比如拼写错了、标点不对等）。
      * 如果没问题，编译器会把你的代码“翻译”成一种更低级的语言——**汇编语言（Assembly Language）**，并最终生成**目标文件（Object File）**，里面是接近机器码的指令。

2.  **链接（Linking）**

      * 一个大型软件可能由成百上千个代码文件组成，每个文件都会被编译成一个目标文件。同时，我们的代码可能还会用到一些系统自带的功能库（比如处理屏幕显示、文件读写的功能）。
      * **链接器（Linker）** 的工作就像一个项目经理，它会把所有这些零散的目标文件和你用到的系统功能库“链接”在一起，组装成一个完整的、可执行的程序。

#### 汇编语言与 CPU：指令的最终执行者

编译过程的中间产物——**汇编语言**，是机器语言的助记符形式。它和机器指令是一一对应的，但比纯粹的 0101 串更容易让人理解。例如，一条让 CPU 做加法运算的机器码可能是 `10000011 11000011`，对应的汇编指令可能是 `ADD AX, BX`。

最终，程序运行时，这些指令会被加载到内存中。**中央处理器（CPU）**，作为计算机的大脑，会一条一条地读取这些指令，并在其内部的运算单元和寄存器中执行它们（比如进行加减乘除、数据移动、逻辑判断等），从而完成程序指定的功能。

**总结一下 C/C++ 的世界：**

> **你写的 C++ 代码 -\> [编译器] -\> 汇编语言/目标文件 -\> [链接器] -\> 可执行程序 -\> [CPU] -\> 完成功能**

-----

### **4. Python：为“人类”设计的语言**

讲完了复杂的 C/C++，我们再来看 Python，你会瞬间感觉轻松很多。

Python 的设计哲学是**优雅、明确、简单**。它不像 C++ 那样需要你手动管理内存，也不需要复杂的编译、链接过程。它是一种**解释型语言 (Interpreted Language)**。

- **解释型 vs. 编译型**：如果说 C++ 的编译器是把整本书一次性翻译完再出版，那么 Python 的**解释器 (Interpreter)** 就是一个同声传译。你说一句（写一行代码），它就翻译一句并立刻执行一句。这使得开发和调试过程变得非常快速和直观。

#### **澄清常见的困惑：Python, PyCharm, Pip, Conda 都是什么？**


这是初学者最容易混淆的地方。很多人以为下载一个 PyCharm 就是装了 Python。让我们用一个清晰的类比来区分它们：

- **Python (语言本身)**
  - **是什么**：它就是“英语”这门语言本身，包含所有的词汇、语法规则。它是核心，是一切的基础。
  - **如何体现**：你从 Python 官网下载的那个安装包，就是**Python 解释器**，是让你的电脑能够听懂 Python 这门语言的“翻译官”。
- **PyCharm (IDE - 集成开发环境)**
  - **是什么**：它是一个高级的“Word 文档处理器”，专门用来写“英语作文”（Python 代码）。它提供了语法高亮（帮你区分动词名词）、自动补全（输入 `pri` 就提示 `print`）、错误检查、一键运行等便利功能。
  - **类比**：你完全可以在记事本（最简单的文本编辑器）里写 Python 代码，但用 PyCharm 会让你的写作体验和效率大大提升。**PyCharm 是写代码的工具，而不是语言本身。**
- **Pip (包管理器)**
  - **是什么**：它是 Python 官方自带的“应用商店”。Python 的强大之处在于有海量的第三方**库 (Library/Package)**，这些库封装了各种强大的功能（比如数据分析、人工智能）。
  - **如何工作**：当你想用一个叫 `pandas` 的库来分析数据时，你不需要自己去网站下载，只需在命令行里输入 `pip install pandas`，pip 就会自动帮你找到、下载并安装好这个库。
- **Conda (环境与包管理器)**
  - **是什么**：Conda 是一个更强大的“项目总管家”。它不仅有 Pip 的功能（也能安装库），还有一个核心功能——**环境管理**。
  - **为什么需要它**：想象一下，你的项目A需要1.0版本的 `pandas`，而项目B需要2.0版本的 `pandas`，如果都装在系统里就会冲突。Conda 可以为你创建两个完全隔离的“房间”（环境），A房间里装1.0版，B房间里装2.0版，互不干扰。这对于管理复杂项目至关重要。

**总结一下：**

> 你决定用 **Python (语言)** 来完成一个任务。于是你打开 **PyCharm (写作工具)** 开始写代码。写到一半，你发现需要一个特殊工具，就用 **Pip** 或 **Conda (应用商店)** 下载了一个叫 `pandas` 的**库 (功能包)**来帮你处理数据。

-----

### 应用场景：我们用它们来做什么？

| 特性比较 | C / C++ | Python |
| :--- | :--- | :--- |
| **性能** | 极致，像风一样快 | 足够用，但比 C++ 慢（因为是解释执行） |
| **开发效率** | 较低，代码长，编译慢 | 极高，代码简洁，即写即运行 |
| **学习难度** | 陡峭，需要理解底层 | 平缓，语法更接近自然语言 |
| **核心比喻** | 手动挡赛车 | 自动挡智能汽车 |

#### C/C++ 的主要应用场景（追求极致性能和底层控制）

  * **操作系统**：Windows, macOS, Linux, Android, iOS 的核心部分都是用 C/C++ 写的。
  * **游戏开发**：大型 3D 游戏引擎，如 Unreal Engine（虚幻引擎）、Unity（部分核心），需要榨干硬件的每一分性能来实现逼真的画面和物理效果。
  * **高性能计算/嵌入式系统**：驱动你家智能微波炉、洗衣机的微型芯片，或者用于科学模拟和金融交易的服务器，都要求极致的效率和低延迟。
  * **浏览器/数据库**：Google Chrome 浏览器、MySQL 数据库等，这些需要处理海量数据和高并发请求的底层软件。

**例子**：当你玩一款次世代 3D 大作时，那流畅的画面、复杂的物理碰撞，背后就是 C++ 强大的性能在支撑。

#### Python 的主要应用场景（追求开发效率和生态系统）

  * **数据科学与人工智能（AI）**：这是 Python **最**闪耀的领域。无论是数据清洗、分析、可视化，还是构建复杂的机器学习、深度学习模型（例如人脸识别、推荐系统），Python 凭借 `Pandas`, `NumPy`, `TensorFlow`, `PyTorch` 等强大的库，成为了事实上的标准。
  * **Web 开发**：许多网站的后端服务是用 Python 搭建的，例如 Instagram, YouTube, 知乎。使用 `Django` 或 `Flask` 这样的框架，可以快速开发出功能完善的网站。
  * **自动化办公/网络爬虫**：写个小程序自动处理 Excel 表格、批量下载文件、抓取网页上的信息，Python 是完成这些任务的绝佳工具，能把文科生从繁琐的重复劳动中解放出来。
  * **科学计算与教育**：在科研和高校教育中，Python 因其简单易学和丰富的科学计算库而备受青睐。

**例子**：今日头条、抖音为你推荐的短视频，背后就是基于 Python 的推荐算法在不知疲倦地学习你的偏好。你用 Python 写几十行代码，就能自动抓取所有同学的论文题目并整理成一个 Excel 表。

### **6. Python 的魅力：用几行代码体验强大功能**



Python 的强大不在于语言本身，而在于其背后无穷无尽的“功能库”。你不需要重新发明轮子，只需要学会如何使用这些强大的轮子。



#### **示例1：用 5 行代码完成数据分析**



假设你有一个 Excel 文件 `sales.csv`，记录了不同产品的销售额。你想快速计算每种产品的平均销售额。

Python

```
# 导入强大的数据分析库 pandas
import pandas as pd

# 1. 读取 Excel/CSV 文件，只需要一行代码
data = pd.read_csv('sales.csv')

# 2. 按照 '产品名称' 分组，并计算 '销售额' 的平均值
average_sales = data.groupby('产品名称')['销售额'].mean()

# 3. 打印结果
print(average_sales)
```

解释：

你不需要关心如何打开文件、如何一行行读取数据、如何创建字典来存储求和、如何计算平均值。pandas 这个库已经把所有复杂操作都封装好了。你只需要调用 read_csv 和 groupby().mean() 这两个简单的指令，就能完成传统方法可能需要几十上百行代码才能完成的工作。



#### **示例2：用 3 行代码调用顶尖的 AI 大语言模型**



想不想体验一下 AI 的威力？比如，让 AI 判断一句话是积极的还是消极的？

Python

```
# 导入 Hugging Face 的 transformers 库，这是AI领域的利器
from transformers import pipeline

# 1. 创建一个情感分析的流水线，模型会自动下载
sentiment_pipeline = pipeline("sentiment-analysis")

# 2. 分析一句话的情感
result = sentiment_pipeline("I love studying programming, it's so empowering!")
print(result)
# 输出可能类似: [{'label': 'POSITIVE', 'score': 0.999...}]
```

解释：

你不需要理解复杂的神经网络和 Transformer 模型。transformers 库让你只需要三行代码，就能调用一个训练好的、非常强大的 AI 模型来完成任务。这在几年前是不可想象的。对于文科同学，可以用它来做文本分析、舆情监控；对于商科同学，可以用它来分析用户评论。

### 为什么建议大家掌握 Python？

对于非计算机专业的同学来说，投入大量时间去学习 C++ 这样复杂的语言，性价比可能不高。而 **Python**，则是一项“**低投入、高回报**”的技能。

1.  **易于上手**：语法简单清晰，更符合人类的思维习惯，让你能快速体验到编程的乐趣和成就感。
2.  **应用广泛，解决实际问题**：你可以在你的专业领域找到它的用武之地。
      * **商科同学**：可以用 Python 做量化交易、分析用户消费数据、预测销售趋势。
      * **文科同学**：可以做社会调查数据分析、进行数字人文研究（如文本分析）、或者自动化处理文献资料。
3.  **提升数据素养**：在未来，无论从事什么行业，处理和分析数据的能力都将是核心竞争力。Python 是开启这扇大门的钥匙。
4.  **思维的体操**：学习编程能训练你的逻辑思维、抽象思维和解决问题的能力。这种思维方式的提升，会让你在任何领域都受益匪นาน。

**总结**：学习 C++ 是在学习如何制造一辆高性能的汽车，而学习 Python 是在学习如何驾驶汽车去到任何你想去的地方，并利用汽车的便利性来完成你的工作。对于大多数人来说，学会“驾驶”远比学会“制造”更加实用和迫切。

希望这份介绍能帮助大家对计算机编程有一个初步的、清晰的认识。编程不是一门高不可攀的技术，它只是一种强大的工具，等待着你去学习和使用它，来创造属于你的价值。